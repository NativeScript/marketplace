<div x-data="searchData()"
     class="mt-10">
    <form @submit.prevent="search($dispatch)" class="">
        <label class="relative flex items-center">
            <span class="sr-only">Search plugins</span>
            <input class="block w-full border-b-4 border-ns-blue-light bg-transparent text-2xl placeholder-gray-700 px-4 py-2"
                   placeholder="Search for plugins" x-model="query">

            <button x-show="query != ''" type="reset" @click.prevent="query = ''"
                    title="Clear search query"
                    class="absolute inset-y-auto right-0 w-10 h-10 p-2 text-gray-800">
                <svg viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
            </button>
        </label>

    </form>

    <div x-show="results.length">
        <h2 class="text-3xl text-gray-600 mt-10">Search Results (<span x-text="results.length"></span>)</h2>

        <ul class="grid grid-cols-1 gap-8 mt-8">
            <template x-for="result in results" :key="result.refIndex">
                <li>
                    <div class="flex">
                        <div class="w-12 h-12 plugin-image flex-shrink-0"></div>
                        <div class="ml-4">
                            <a :href="`/plugins/${result.item.name}`"
                               class="text-xl font-bold text-gray-900" x-text="result.item.name"></a>
                            <div class="text-sm text-gray-700">
                                <a :href="`/author/${result.item.author.username}`"
                                   class="hover:text-blue-800"
                                   x-text="`by ${result.item.author.name}`"
                                ></a>
                                <span> | </span>
                                <span x-text="`v${result.item.version}`"></span>
                            </div>
                            <div class="text-base text-gray-800 mt-2"
                                 x-text="result.item.description">
                            </div>
                            <div class="flex space-x-2 mt-2 opacity-25" title="Not yet implemented.">
                                <div class="w-6 h-6 badge-android"></div>
                                <div class="w-6 h-6 badge-ios"></div>
                                <div class="w-6 h-6 badge-webpack"></div>
                                <div class="w-6 h-6 badge-demos"></div>
                                <div class="w-6 h-6 badge-license"></div>
                                <div class="w-6 h-6 badge-version"></div>
                                <div class="w-6 h-6 badge-typings"></div>
                                <div class="w-6 h-6 badge-angular"></div>
                                <div class="w-6 h-6 badge-vue"></div>
                                <div class="w-6 h-6 badge-ci"></div>
                                <div class="w-6 h-6 badge-popular"></div>
                            </div>
                        </div>
                    </div>
                </li>
            </template>
        </ul>

    </div>


    <script>
        function searchData() {
            const plugins = {{ plugins | json | safe }}
            const fuseIndex = {{ fuseIndex | json | safe }}
            const options = {
                includeScore: true,
                useExtendedSearch: true,
                minMatchCharLength: 2,
                ignoreLocation: true,
                keys: [
                    {
                        name: 'name',
                        weight: 10
                    },
                    {
                        name: 'keywords',
                        weight: 5
                    },
                    {
                        name: 'description',
                        weight: 1
                    }
                ]
            }
            const fuse = new Fuse(plugins, options, Fuse.parseIndex(fuseIndex))

            return {
                query: '',
                results: [],
                search() {
                    const results = fuse.search(this.query) //`nativescript-${this.query}`)

                    // results.map(result => {
                    //     result.score *= (plugins.length - result.refIndex) / 100
                    // })
                    // results.sort((a, b) => {
                    //     return b.score - a.score
                    // })
                    console.log(results)
                    this.results = results.slice(0, 50)
                }
            }
        }
    </script>
</div>
